package Algorithms;

/**
 * ■ В рекурсии должен быть базовый вариант: мы всегда помещаем в начало рекурсивной программы условный оператор с оператором return.
 * ■ Рекурсивные вызовы должны обращаться к подзадачам, меньшим в некотором смысле, чтобы рекурсивные вызовы сходились к базовому варианту.
 * В листинге 1.1.1 разность значений четвертого и третьего аргументов постоянно уменьшается.
 * ■ Рекурсивные вызовы не должны обращаться к перекрывающимся подзадачам. В листинге 1.1.1 части массива, просматриваемые двумя подзадачами, не имеют общих элементов.
 *
 * Несоблюдение данных правил может привести к неверным результатами или к чрезвычайно неэффективной программе (см. упражнения 1.1.19 и 1.1.27).
 * Эти правила предназначены для получения ясных и корректных программ, производительность которых легко оценить.
 * Еще одна причина использования рекурсивных методов — они приводят к математическим моделям, которые позволяют оценить производительность.
 * Этот вопрос будет рассмотрен при изучении бинарного поиска в разделе 3.2 и в ряде других мест книги.
 * */


public class Recurtions {

    public static void main(String[] args) {

    }

}
